nextflow_process {

    name "Test Process COPY_BAM"
    script "./main.nf"
    process "COPY_BAM"

    tag "methods"

    test ("raw reads - aws"){
        when {
            process {
                """
                input[0] = Channel.of(
                    file("s3://ngi-igenomes/testdata/nf-core/modules/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists:true)
                )
                """
            }
        }
        then {
            assert snapshot(process.out.bam.collect { bam(it, "s3://ngi-igenomes/testdata/nf-core/modules/genomics/homo_sapiens/genome/genome.fasta").getReads(11) }).match("raw reads - aws")
        }
    }

    test("header") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect {
                it.endsWith(".cram") ? cram(it).getHeader().findAll { !it.startsWith ("@SQ") } : bam(it).getHeader() // Remove SQ header from cram file due to absolute path for reference
            }).match("header")
        }

    }

    test("header MD5") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect {
                bam(it).getHeaderMD5()
            }).match("header MD5")
        }

    }

    test("raw reads") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/genome.fasta").getReads(11) }).match("raw reads")
        }

    }

    test("raw reads - no fasta index") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/no_index.fasta").getReads(11) }).match("raw reads - no fasta index")
        }

    }

    test("raw reads - external reference") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect {
                bam(it, "https://github.com/nf-core/test-datasets/raw/modules/data/genomics/sarscov2/genome/genome.fasta").getReads(11)
            }).match("raw reads - external reference")
        }

    }

    test("raw reads - no limit") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/genome.fasta").getReads().size() }).match("raw reads - no limit")
        }

    }

    test("raw reads MD5") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/genome.fasta").getReadsMD5() }).match("raw reads MD5")
        }

    }

    test("file types") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it).getFileType() }).match("file types")
        }

    }

    test("sam lines") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/genome.fasta").getSamLines(11) }).match("sam lines")
        }

    }

    test("sam lines - no limit") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/genome.fasta").getSamLines().size() }).match("sam lines - no limit")
        }

    }


    test("sam lines MD5") {

        when {
            process {
                """
                input[0] = Channel.of(
                    file("${baseDir}/tests/test.paired_end.bam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.sam", checkIfExists:true),
                    file("${baseDir}/tests/test.paired_end.cram", checkIfExists:true)
                )
                """
            }
        }

        then {
            assert snapshot(process.out.bam.collect { bam(it, "${baseDir}/tests/genome.fasta").getSamLinesMD5() }).match("sam lines MD5")
        }

    }

}
