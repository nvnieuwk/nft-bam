{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nft-bam","text":"<p>nft-bam is an nf-test plugin to make working with SAM, BAM or CRAM files easier.</p>"},{"location":"#start-using-the-plugin","title":"Start using the plugin","text":"<p>To start using the plugin please add it to your <code>nf-test.config</code> file:</p> nf-test.config<pre><code>config {\n    plugins {\n        load \"nft-bam@0.5.0\"\n    }\n}\n</code></pre> <p>Have a look at the usage documentation for more information on how to start working with the plugin.</p>"},{"location":"#use-a-development-version","title":"Use a development version","text":"<p>To use the development version, please do the following steps:</p> <ul> <li>Clone the nft-bam repository</li> </ul> HTTPSSSH <pre><code>git clone git@github.com:nvnieuwk/nft-bam.git\n</code></pre> <pre><code>git clone https://github.com/nvnieuwk/nft-bam.git\n</code></pre> <ul> <li>Run the build script</li> </ul> <pre><code>./build.sh\n</code></pre> <ul> <li>Add the jar location (visible at the end of the build script output) to the <code>nf-test.config</code> file</li> </ul> nf-test.config<pre><code>config {\n    plugins {\n        loadFromFile \"full/path/to/the/plugin/jar\"\n    }\n}\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>The plugin adds one new function to be able to parse the SAM/BAM/CRAM files correctly. This function is called <code>bam()</code>, but can also be called with aliases <code>sam()</code> and <code>cram()</code>.</p>"},{"location":"usage/#bam-sam-cram-function","title":"<code>bam()</code> / <code>sam()</code> / <code>cram()</code> function","text":"<p>The function has one mandatory argument:</p> <ul> <li>The BAM/CRAM/SAM file used as output of the process/workflow</li> </ul> main.nf.test<pre><code>then {\n    bam(\"&lt;process or workflow output that contains the SAM/BAM/CRAM file&gt;\")\n}\n</code></pre> <p>The function has one optional argument:</p> <ul> <li>The reference FASTA file. This is necessary for some operations on CRAM files.</li> </ul> main.nf.test<pre><code>then {\n    cram(\"&lt;SAM/BAM/CRAM&gt;\", \"&lt;reference_fasta&gt;\")\n}\n</code></pre> <p>The fasta can either be a local file or a file URL (currently only supports HTTP and HTTPS protocols)</p> <p>Additionally, the <code>stringency</code> option can also be used to set the validation stringency of the HTSJDK library. This can be used to silence the validation errors emitted when an alignment file isn't correct. This options accepts 3 possible values: <code>lenient</code>, <code>silent</code> and <code>strict</code>(default).</p> main.nf.test<pre><code>then(\n    bam(\"&lt;SAM/BAM/CRAM&gt;\", stringency: \"lenient\")\n)\n</code></pre> <p>This will create an <code>AlignmentFile</code> object which has several methods to access the content of the SAM/BAM/CRAM file.</p>"},{"location":"usage/#getheader-method","title":"<code>.getHeader()</code> method","text":"<p>The <code>.getHeader()</code> method returns a list of all header lines:</p> main.nf.testExample output <pre><code>then {\n    bam(\"...\").getHeader()\n}\n</code></pre> <pre><code>[\n    \"@HD\\tVN:1.6\\tSO:unsorted\",\n    \"@SQ\\tSN:MT192765.1\\tLN:29829\",\n    \"@RG\\tID:1\\tLB:lib1\\tPL:ILLUMINA\\tSM:test\\tPU:barcode1\",\n    \"@PG\\tID:minimap2\\tPN:minimap2\\tVN:2.17-r941\\tCL:minimap2 -ax sr tests/data/fasta/sarscov2/GCA_011545545.1_ASM1154554v1_genomic.fna tests/data/fastq/dna/sarscov2_1.fastq.gz tests/data/fastq/dna/sarscov2_2.fastq.gz\",\n    \"@PG\\tID:samtools\\tPN:samtools\\tPP:minimap2\\tVN:1.11\\tCL:samtools view -Sb sarscov2_aln.sam\"\n]\n</code></pre>"},{"location":"usage/#getheadermd5-method","title":"<code>.getHeaderMD5()</code> method","text":"<p>The <code>.getHeaderMD5()</code> method returns the MD5 checksum of the header:</p> main.nf.testExample output <pre><code>then {\n    sam(\"...\").getHeaderMD5()\n}\n</code></pre> <pre><code>\"4ab674cd5f921b2b5c68642aeb0ab3f4\"\n</code></pre>"},{"location":"usage/#getreads-method","title":"<code>.getReads()</code> method","text":"<p>A reference is needed here for CRAM files</p> <p>The <code>.getReads()</code> method returns a list of all raw reads from the alignment file:</p> main.nf.testExample output <pre><code>then {\n    bam(\"...\").getReads()\n}\n</code></pre> <pre><code>[\n    \"ACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTGCTGAAATTGTTGACACTGTGAGTGCTTTGGTTTATGA\",\n    \"ATGTGTACATTGGCGACCCTGCTCAATTACCTGCACCACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTG\",\n    \"GCATAGACGGTGCTTTACTTACAAAGTCCTCAGAATACAAAGGTCCTATTACGGATGTTTTCTACAAAGAAAACAGT\",\n    \"GCATAGACGGTGCTTTACTTACAAAGTCCTCAGAATACAAAGGTCCTATTACGGATGTTTTCTACAAAGAAAACAGT\",\n    \"TAGGTGAGTTAGGTGATGTTAGAGAAACAATGAGTTACTTGTTTCAACATGCCAATTTAGATTCTTGCAAAAGAGTCTTGAACGTGGTGTGTAAAACTTGTGGACAACAGCAGACAACCCTTAAGGGTGTAGAAGCTGTTATGTAC\",\n    \"TTACAGAGCAAGGGCTGGTGAAGCTGCTAACTTTTGTGCACTTATCTTAGCCTACTGTAATAAGACAGTAGGTGAGTTAGGTGATGTTAGAGAAACAATGAGTTACTTGTTTCAACATGCCAATTTAGATTCTTGCAAAAGAGTCTTGAA\",\n    \"GTCTACAAGCTGGTAATGCAACAGAAGTGCCTGCCAATTCAACTGTATTATCTTTCTGTGCTTTTGCTGTAGATGCTGCTAAAGCTTACAAAGATTATCTAGCTAGTGGGGGACAACCAATCACTAATTGTG\",\n    \"GTCTACAAGCTGGTAATGCAACAGAAGTGCCTGCCAATTCAACTGTATTATCTTTCTGTGCTTTTGCTGTAGATGCTGCTAAAGCTTACAAAGATTATCTAGCTAGTGGGGGACAACCAATCACTAATTGTG\",\n    \"AACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGT\",\n    \"AACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCC\",\n    \"ACTTTCCAAAGTGCAGTCAAAAGAACAATCACGGGTACACACCACTGGTTGTTACTCACAATTTTGACTTCACTTTTAG\",\n    ...\n]\n</code></pre> <p>You can also supply an integer to the function to limit the amount of reads the function returns:</p> main.nf.testExample output <pre><code>then {\n    bam(\"...\").getReads(2)\n}\n</code></pre> <pre><code>[\n    \"ACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTGCTGAAATTGTTGACACTGTGAGTGCTTTGGTTTATGA\",\n    \"ATGTGTACATTGGCGACCCTGCTCAATTACCTGCACCACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTG\"\n]\n</code></pre>"},{"location":"usage/#getreadsmd5-method","title":"<code>.getReadsMD5()</code> method","text":"<p>The <code>.getReadsMD5()</code> method returns the MD5 checksum of the raw reads:</p> main.nf.testExample output <pre><code>then {\n    bam(\"...\").getReadsMD5()\n}\n</code></pre> <pre><code>\"762e859a3d0ed1553655cde77665c940\"\n</code></pre>"},{"location":"usage/#getsamlines-method","title":"<code>.getSamLines()</code> method","text":"<p>A reference is needed here for CRAM files</p> <p>The <code>.getSamLines()</code> method returns a list of all lines from the alignment file:</p> main.nf.testExample output <pre><code>then {\n    sam(\"...\").getSamLines()\n}\n</code></pre> <pre><code>[\n    \"ERR5069949.2151832\\t83\\tMT192765.1\\t17453\\t60\\t150M\\t=\\t17416\\t-187\\tACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTGCTGAAATTGTTGACACTGTGAGTGCTTTGGTTTATGA\\tAAAA&lt;EEEEEEAEEEAEAAAAEEEEEEEEEAAAEE&lt;EEEEEAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEEEAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAAAAAA\\ts1:i:183\\ts2:i:0\\tRG:Z:1\\tAS:i:300\\tde:f:0.0\\trl:i:0\\tcm:i:13\\tnn:i:0\\ttp:A:P\\tms:i:300\\n\",\n    \"ERR5069949.2151832\\t163\\tMT192765.1\\t17416\\t60\\t150M\\t=\\t17453\\t187\\tATGTGTACATTGGCGACCCTGCTCAATTACCTGCACCACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTG\\tAAAAAEEEEEEEEEE/EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEEEEEEEEE/EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAAEEEEEEEAEEEEEAAEEEEEEEEEAAEAAA&lt;&lt;EAAEEEEEEEAAA&lt;&lt;&lt;AE\\ts1:i:183\\ts2:i:47\\tRG:Z:1\\tAS:i:300\\tde:f:0.0\\trl:i:0\\tcm:i:14\\tnn:i:0\\ttp:A:P\\tms:i:300\\n\",\n    \"ERR5069949.576388\\t83\\tMT192765.1\\t5798\\t50\\t77M\\t=\\t5798\\t-77\\tGCATAGACGGTGCTTTACTTACAAAGTCCTCAGAATACAAAGGTCCTATTACGGATGTTTTCTACAAAGAAAACAGT\\tEA/AEEE/&lt;EEEEEEEEEEEAA&lt;EEEEEEEEEEEEEEEEEEEEEAEEEEEAEEEAEE6/EEEAEEEEEEEEEA6AAA\\ts1:i:62\\ts2:i:0\\tRG:Z:1\\tAS:i:154\\tde:f:0.0\\trl:i:0\\tcm:i:1\\tnn:i:0\\ttp:A:P\\tms:i:154\\n\",\n    \"ERR5069949.576388\\t163\\tMT192765.1\\t5798\\t60\\t77M\\t=\\t5798\\t77\\tGCATAGACGGTGCTTTACTTACAAAGTCCTCAGAATACAAAGGTCCTATTACGGATGTTTTCTACAAAGAAAACAGT\\tAAAAA6EEAEEEEEAEEAEEAEEEEEEA6EEEEAEEAEEEEE6EEEEEEAEEEEA///A&lt;&lt;EEEEEEEEEAEEEEEE\\ts1:i:62\\ts2:i:0\\tRG:Z:1\\tAS:i:154\\tde:f:0.0\\trl:i:0\\tcm:i:10\\tnn:i:0\\ttp:A:P\\tms:i:154\\n\",\n    ...\n]\n</code></pre> <p>You can also supply an integer to the function to limit the amount of lines the function returns:</p> main.nf.testExample output <pre><code>then {\n    sam(\"...\").getSamLines(2)\n}\n</code></pre> <pre><code>[\n    \"ERR5069949.2151832\\t83\\tMT192765.1\\t17453\\t60\\t150M\\t=\\t17416\\t-187\\tACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTGCTGAAATTGTTGACACTGTGAGTGCTTTGGTTTATGA\\tAAAA&lt;EEEEEEAEEEAEAAAAEEEEEEEEEAAAEE&lt;EEEEEAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEEEAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAAAAAA\\ts1:i:183\\ts2:i:0\\tRG:Z:1\\tNM:i:0\\tAS:i:300\\tde:f:0.0\\trl:i:0\\tcm:i:13\\tnn:i:0\\ttp:A:P\\tms:i:300\\n\",\n    \"ERR5069949.2151832\\t163\\tMT192765.1\\t17416\\t60\\t150M\\t=\\t17453\\t187\\tATGTGTACATTGGCGACCCTGCTCAATTACCTGCACCACGCACATTGCTAACTAAGGGCACACTAGAACCAGAATATTTCAATTCAGTGTGTAGACTTATGAAAACTATAGGTCCAGACATGTTCCTCGGAACTTGTCGGCGTTGTCCTG\\tAAAAAEEEEEEEEEE/EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEEEEEEEEE/EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAAEEEEEEEAEEEEEAAEEEEEEEEEAAEAAA&lt;&lt;EAAEEEEEEEAAA&lt;&lt;&lt;AE\\ts1:i:183\\ts2:i:47\\tRG:Z:1\\tNM:i:0\\tAS:i:300\\tde:f:0.0\\trl:i:0\\tcm:i:14\\tnn:i:0\\ttp:A:P\\tms:i:300\\n\"\n]\n</code></pre>"},{"location":"usage/#getsamlinesmd5-method","title":"<code>.getSamLinesMD5()</code> method","text":"<p>The <code>.getSamLinesMD5()</code> method returns the MD5 checksum of the plain SAM lines:</p> main.nf.testExample output <pre><code>then {\n    sam(\"...\").getSamLinesMD5()\n}\n</code></pre> <pre><code>\"448bf7ab4ce921321beca4ca3bd78f06\"\n</code></pre>"},{"location":"usage/#getfiletype-method","title":"<code>.getFileType()</code> method","text":"<p>The <code>.getFileType()</code> method returns the type (\"SAM\", \"BAM\" or \"CRAM\") of the input file:</p> main.nf.testExample output <pre><code>then {\n    bam(\"test.bam\").getFileType()\n}\n</code></pre> <pre><code>\"BAM\"\n</code></pre>"},{"location":"usage/#getstatistics-method","title":"<code>.getStatistics()</code> method","text":"<p>The <code>.getStatistics()</code> method returns a Map structure containing several statistics for the input file:</p> main.nf.testExample output <pre><code>then {\n    bam(\"test.bam\").getStatistics()\n}\n</code></pre> <pre><code>{\n    \"maxReadLength\": 151,\n    \"minReadLength\": 53,\n    \"meanReadLength\": 138,\n    \"maxQuality\": 60,\n    \"minQuality\": 0,\n    \"meanQuality\": 57,\n    \"readCount\": 200,\n    \"duplicateReadCount\": 345,\n}\n</code></pre> <p>This method contains some additional options:</p> <ol> <li><code>include</code>: this option takes a list of statistic names (the names in the returned map) and returns a map containing these values.</li> <li><code>exclude</code>: this option takes a list of statistic names and returns a map without these values.</li> </ol> <p>Examples:</p> includeexclude <pre><code>then {\n    bam(\"test.bam\").getStatistics(include:[\"readCount\",\"meanQuality\"])\n}\n</code></pre> <pre><code>then {\n    bam(\"test.bam\").getStatistics(exclude:[\"maxReadLength\",\"minReadLength\"])\n}\n</code></pre>"},{"location":"usage/#supplying-a-s3-reference","title":"Supplying a <code>s3://</code> reference","text":"<p>The plugin also supports <code>s3://</code> for the reference fasta file. By default <code>nft-bam</code> will look at the region <code>us-east-1</code> unless specified in the <code>~/.aws/credentials</code> file or in system environment variables. Non-public buckets will need to have the correct permissions set.</p> main.nf.test<pre><code>then {\n    bam(\"test.bam\", \"s3://bucket-name/reference.fasta\")\n}\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":"<p>Have a look at the plugin tests to see some example implementations.</p>"}]}